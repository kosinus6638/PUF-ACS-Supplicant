#include "SRAM_PUF.h"

#include <packets.h>

#ifdef USE_SOFTWARE_PUF
// 128 Bytes
static uint8_t SRAM_CONTENT[] = {
    0xc1, 0x0a, 0x82, 0x2d, 0x96, 0x12, 0x1f, 0xb9, 0xa2, 0xfe, 0x7d, 0x8f, 0xb3, 0xe2, 0xb4, 0x9a,
    0x23, 0x4f, 0xec, 0xbb, 0xec, 0x70, 0xd9, 0xdf, 0x80, 0x4c, 0x40, 0xdf, 0x54, 0xfc, 0xf7, 0x96,
    0x64, 0x09, 0xc8, 0x1c, 0x6f, 0x77, 0xe5, 0x74, 0x16, 0x2f, 0x02, 0xa4, 0xe9, 0xb1, 0x5d, 0x89,
    0x39, 0xed, 0x74, 0xff, 0x8b, 0x2e, 0x54, 0x42, 0xde, 0xd6, 0xb0, 0xfd, 0x16, 0x27, 0x78, 0x24,
    0xd0, 0xc6, 0xa9, 0x70, 0xe0, 0x47, 0x27, 0xa6, 0xb7, 0x52, 0x1d, 0x26, 0x1f, 0x53, 0x64, 0xd9,
    0x96, 0xab, 0x16, 0x57, 0x25, 0x45, 0x74, 0xa3, 0xd3, 0x10, 0x37, 0x73, 0x51, 0xeb, 0x97, 0x72,
    0x71, 0xbc, 0x39, 0x51, 0x71, 0xe6, 0xd2, 0x98, 0x39, 0xe3, 0x1b, 0xc2, 0x98, 0x30, 0x15, 0xfe,
    0x65, 0xe8, 0x91, 0xc5, 0x82, 0xec, 0x0f, 0xb1, 0x61, 0xee, 0xf2, 0x93, 0xc6, 0x87, 0x33, 0xce
};

// 128 Bytes
static uint8_t STABLE_BITS[] = {
    0x63, 0x65, 0x1a, 0xba, 0x66, 0xbe, 0x5a, 0xfd, 0x77, 0x91, 0xcb, 0xeb, 0x59, 0x7f, 0xbd, 0x74,
    0xfb, 0x26, 0x53, 0x45, 0x65, 0x99, 0x80, 0xd4, 0x08, 0x32, 0xd8, 0x2c, 0x33, 0xe3, 0xd8, 0x28,
    0x7e, 0xc4, 0xea, 0x9e, 0x83, 0x20, 0x74, 0x2e, 0x1a, 0xa1, 0x52, 0x28, 0xe5, 0x34, 0xa9, 0x99,
    0xd3, 0xe1, 0xee, 0x8d, 0xad, 0xba, 0xe6, 0x6a, 0xa2, 0x87, 0x88, 0x01, 0x4a, 0xfa, 0x23, 0xf4,
    0xc5, 0xb9, 0xc8, 0xe8, 0x01, 0x98, 0x10, 0x69, 0x15, 0x54, 0x3f, 0xf3, 0xb1, 0x06, 0x85, 0x3c,
    0x50, 0x45, 0x3d, 0xd2, 0xad, 0xc7, 0x5f, 0xcf, 0xbc, 0x76, 0xc1, 0xa5, 0xf7, 0x5f, 0x0e, 0xb5,
    0x40, 0xbe, 0xd4, 0x0d, 0xe9, 0x72, 0x3a, 0x63, 0x9f, 0x69, 0x5e, 0x5e, 0x63, 0xe9, 0x20, 0xe4,
    0x35, 0x3e, 0x11, 0x10, 0xca, 0xbe, 0xbe, 0xbb, 0xc7, 0x02, 0x13, 0xc9, 0xa8, 0x88, 0x2f, 0x9b
};
#else
// ToDo: Extract stable bits using the crime against humanity relay construction
static uint8_t STABLE_BITS[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff 
};
#endif


#ifdef USE_SOFTWARE_PUF
SRAM_PUF::SRAM_PUF() : sram(SRAM_CONTENT), stable(STABLE_BITS) {}
#else
SRAM_PUF::SRAM_PUF() : sram(reinterpret_cast<uint8_t*>(SRAM1_BEGIN)), stable(STABLE_BITS) {}
#endif

puf::MAC SRAM_PUF::puf_to_mac() const {
    puf::MAC retval;
    memcpy(retval.bytes, stable, 6);
    return retval;
}    

puf::MAC SRAM_PUF::get_puf_response(const puf::MAC& challenge) const {
    puf::MAC retval;
    uint64_t res = 0;
    for(int i=0; i<6; ++i) {
        for(int j=0; j<7; ++j) {
            if(challenge.bytes[i] & (1<<j)) {
                res <<= 1;
                res |= (sram[i] & (1<<j)) >> j;
            }
        }
    }
    memcpy( retval.bytes, static_cast<void*>(&res), 6 );
    return retval;
}